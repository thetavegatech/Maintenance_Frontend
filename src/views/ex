import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import { CRow, CCol, CDropdown, CDropdownMenu, CDropdownItem, CDropdownToggle, CWidgetStatsA } from '@coreui/react';
import { getStyle } from '@coreui/utils';
import { useNavigate } from 'react-router-dom';
import { CChartBar, CChartLine } from '@coreui/react-chartjs';
import CIcon from '@coreui/icons-react';
import { cilArrowBottom, cilArrowTop, cilOptions } from '@coreui/icons';
import { BarChart, Bar, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Date } from 'core-js';

const WidgetsDropdown = () => {
  const navigate = useNavigate();
  const [breakdownType, setBreakdownType] = useState([]);
  const [formattedChartData, setFormattedChartData] = useState([]);
  const [assets, setAssets] = useState([]);
  const [totalTasks, setTotalTasks] = useState(0);
  const [breakdowns, setBreakdown] = useState([]);
  const [totalBreakdown, setTotalBreakdown] = useState(0);
  const [pendingTaskCount, setPendingTaskCount] = useState(0);
  const [completedTasksCount, setCompletedTasksCount] = useState(0);
  const [todaysTaskCount, setTodaysTaskCount] = useState(0);

  const today = new Date();
  const formattedToday = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
  const todaysScheduledAssets = assets.filter((asset) => asset.nextDate === formattedToday);
  const todaysScheduledAssetsOk = assets.filter((asset) => asset.nextDate === formattedToday && asset.status === 'Completed');
  const todaysScheduledAssetsNok = assets.filter((asset) => asset.nextDate === formattedToday && asset.status === 'Pending');

  useEffect(() => {
    fetch('https://mms-backend-n2zv.onrender.com/getBreakdownData')
      .then((response) => response.json())
      .then((fetchedBreakdowns) => {
        const aggregated = aggregateData(fetchedBreakdowns);
        const chartData = convertToChartData(aggregated);
        setFormattedChartData(chartData);
      })
      .catch((error) => console.error('Error fetching breakdowns: ', error));
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://mms-backend-n2zv.onrender.com/getAllData');
        const fetchedTasks = await response.json();

        setAssets(fetchedTasks);
        setTotalTasks(fetchedTasks.length);

        const pendingTasks = fetchedTasks.filter((asset) => asset.status === 'Pending');
        setPendingTaskCount(pendingTasks.length);

        const completedTasks = fetchedTasks.filter((asset) => asset.status === 'Completed');
        setCompletedTasksCount(completedTasks.length);

        const currentDate = new Date();
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
        const isEndOfMonth = currentDate.getDate() === lastDayOfMonth.getDate();

        if (isEndOfMonth && pendingTasks.length > 0) {
          const formData = {};
          const numbers = '7020804148';
          const message = `Pending tasks: ${pendingTasks.length}. Please check it out.`;
          sendSMS(formData, numbers, message);
        }
      } catch (error) {
        console.error('Error fetching tasks: ', error);
      }
    };

    fetchData();
  }, []);

  const aggregateData = (data) => {
    return data.reduce((acc, curr) => {
      if (!acc[curr.BreakdownType]) {
        acc[curr.BreakdownType] = 1;
      } else {
        acc[curr.BreakdownType]++;
      }
      return acc;
    }, {});
  };

  const convertToChartData = (aggregatedData) => {
    return Object.entries(aggregatedData).map(([key, value]) => ({
      breakdownType: key,
      value: value,
    }));
  };

  const sendSMS = (formData, numbers, message) => {
    const apiKey = 'NDE1MDY2NGM2Mzc3NTI0ZjQzNmE1YTM5NDY0YzZlNzU=';
    const sender = 'AAABRD';

    const url = `https://api.textlocal.in/send/?apikey=${apiKey}&sender=${sender}&numbers=${numbers}&message=${encodeURIComponent(message)}`;

    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        console.log('SMS sent successfully:', data);
      })
      .catch((error) => {
        console.error('Error sending SMS:', error);
      });
  };

  const handleButtonClick = () => {
    const numbers = '7020804148';
    const message = `Pending tasks: ${pendingTaskCount}. Please check it out.`;
    sendSMS({}, numbers, message);
  };

  useEffect(() => {
    fetch(`https://mms-backend-n2zv.onrender.com/getAllData?nextDate=${formattedToday}`)
      .then((response) => response.json())
      .then((fetchedTasks) => {
        setTodaysTaskCount(fetchedTasks.length);
      })
      .catch((error) => console.error("Error fetching today's tasks: ", error));
  }, []);

  return (
    <CRow>
      {/* ... (Your existing JSX) ... */}
      <CCol sm={6} lg={3}>
        <CWidgetStatsA
          // ... (Your existing JSX) ...
          action={
            <CDropdown alignment="end">
              <CDropdownToggle color="transparent" caret={false} className="p-0">
                <CIcon icon={cilOptions} className="text-high-emphasis-inverse" />
              </CDropdownToggle>
              <CDropdownMenu>
                <CDropdownItem type="submit" onClick={handleButtonClick}>
                  Action
                </CDropdownItem>
                {/* ... (Other dropdown items) ... */}
              </CDropdownMenu>
            </CDropdown>
          }
          // ... (Your existing JSX) ...
        />
      </CCol>
      {/* ... (Other columns) ... */}
    </CRow>
  );
};

export default WidgetsDropdown;
